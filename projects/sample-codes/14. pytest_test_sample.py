
# pytest: 파이썬 표준 라이브러리인 unittest 모듈에 대한 유닛 테스트용 비표준 대안 라이브러리
# pytest 공식 문서: https://docs.pytest.org/en/7.1.x/
# pytest는 파이썬 표준 라이브러리인 unittest와 사용 목적이 동일하다.
# 먼저, pytest를 사용하기 위해서는 명령 프롬프트에 'pip' 명령어를 통해 설치해야 한다.
# 설치 명령어: pip install pytest

# 다음과 같이 함수 'func'을 정의한다.
def func(x):
    return x + 1

# 그 다음, 함수명 앞이나 뒤에 'test_' 혹은 '_test'를 붙여서 테스트를 위한 함수를 정의한다.
def test_answer():
    assert func(3) == 5

# 위와 같은 함수를 정의했다면 에러가 발생할 것이다.
# 왜냐하면 func(3)의 결과는 5가 아닌 4가 나와야하기 때문이다.
# 위의 코드를 작성한 후에 파일명을 'test_sample.py'로 저장한다.
# 그 다음, pytest 라이브러리를 통해 해당 결과가 제대로 나오는지 확인해본다.

# 결과를 확인하려면 명령 프롬프트에 'pytest -v test_sample.py'를 입력하면 된다.
# 여기서 -v 옵션을 주면 아래의 결과처럼 좀 더 자세한 정보를 확인할 수 있다.
# 결과는 아래와 같다.


# test_sample.py::test_answer FAILED                                                                               [100%]
# 
# ====================================================== FAILURES =======================================================
# _____________________________________________________ test_answer _____________________________________________________
# 
#     def test_answer():
# >       assert func(3) == 5
# E       assert 4 == 5
# E        +  where 4 = func(3)
# 
# test_sample.py:7: AssertionError
# =============================================== short test summary info ===============================================
# FAILED test_sample.py::test_answer - assert 4 == 5
# ================================================== 1 failed in 0.45s ==================================================

# 즉, 테스트의 결과값이 5가 나오지 않고 4가 나왔다는 것을 확인할 수 있다.
# 파이썬 표준 라이브러리인 unittest를 통해 테스트하는 방법과 pytest를 통해 사용하는 방법 모두 동일하다.
# 하지만 pytest는 파이썬 표준 라이브러리인 unittest보다 지원하는 기능이 더 많고, 여러 오픈 소스 프로젝트에서도 사용되고 있어서 권장되고 있다.
